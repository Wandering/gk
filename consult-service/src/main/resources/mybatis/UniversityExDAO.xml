<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="cn.thinkjoy.gk.dao.IUniversityExDAO">

    <select id="getWSUniversityDetail" resultType="UniversityDetailDto">
        SELECT a.id ,a.name,a.subjection,a.type,b.lgPlanNumber planNum,b.lgEnrollNumber enrollNum,
        b.lgLowestScore lowestScore ,b.lgLowestRank lowestRanking,b.lgAverageScore averageScore,b.lgAverageRank averageScoresRanking,
        a.provinceName provinceName,
        (select c.name from gk_university_dict c where c.dictId = a.property and c.type = 'FEATURE' ) dictName
        FROM gk_university a
        left join gk_enroll_report b on a.id = b.universityId
        <where>
            1=1
            <if test="year!=null">
                and b.year = #{year}
            </if>
            <if test="id!=null">
                and a.id =#{id}
            </if>
            <if test="batch!=null">
                and b.batch = #{batch}
            </if>
            <if test="code!=null">
                and a.code = #{code}
            </if>
            <if test="areaId!=null">
                and b.areaId = #{areaId}
            </if>
        </where>
    </select>

    <select id="getLGUniversityDetail" resultType="UniversityDetailDto">
        SELECT a.id ,a.name,a.subjection,a.type,b.lgPlanNumber planNum,b.lgEnrollNumber enrollNum,
        b.lgLowestScore lowestScore ,b.lgLowestRank lowestRanking,b.lgAverageScore averageScore,b.lgAverageRank averageScoresRanking,
        a.provinceName provinceName,
        (select c.name from gk_university_dict c where c.dictId = a.property and c.type = 'FEATURE' ) dictName
        FROM gk_university a
        left join gk_enroll_report b on a.id = b.universityId
        <where>
            1=1
            <if test="year!=null">
                and b.year = #{year}
            </if>
            <if test="id!=null">
                and a.id =#{id}
            </if>
            <if test="batch!=null">
                and b.batch = #{batch}
            </if>
            <if test="code!=null">
                and a.code = #{code}
            </if>
            <if test="areaId!=null">
                and b.areaId = #{areaId}
            </if>
        </where>
    </select>


    <select id="getWSUniversityDetailByCodes" resultType="UniversityDetailDto">
        SELECT a.id ,a.name,a.subjection,a.type,b.lgPlanNumber planNum,b.lgEnrollNumber enrollNum,
        b.lgLowestScore lowestScore ,b.lgLowestRank lowestRanking,b.lgAverageScore averageScore,b.lgAverageRank averageScoresRanking,
        (select c.name from gk_university_dict c where c.dictId = a.property and c.type = 'FEATURE' ) dictName
        FROM gk_university a
        left join gk_enroll_report b on a.id = b.universityId
        <where>
            1=1
            <if test="year!=null">
                and b.year = #{year}
            </if>
            <if test="codes!=null">
                and a.code in
                <foreach collection="codes" item="item" index="index" open="(" separator="," close=")">
                    #{item}
                </foreach>
            </if>
            <if test="batch!=null">
                and b.batch = #{batch}
            </if>
            <if test="areaId!=null">
                and b.areaId = #{areaId}
            </if>
        </where>
    </select>

    <select id="getLGUniversityDetailByCodes" resultType="UniversityDetailDto">
        SELECT a.id ,a.name,a.subjection,a.type,b.lgPlanNumber planNum,b.lgEnrollNumber enrollNum,
        b.lgLowestScore lowestScore ,b.lgLowestRank lowestRanking,b.lgAverageScore averageScore,b.lgAverageRank averageScoresRanking,
        (select c.name from gk_university_dict c where c.dictId = a.property and c.type = 'FEATURE' ) dictName
        FROM gk_university a
        left join gk_enroll_report b on a.id = b.universityId
        <where>
            1=1
            <if test="year!=null">
                and b.year = #{year}
            </if>
            <if test="codes!=null">
                and a.code in
                <foreach collection="codes" item="item" index="index" open="(" separator="," close=")">
                    #{item}
                </foreach>
            </if>
            <if test="batch!=null">
                and b.batch = #{batch}
            </if>
            <if test="areaId!=null">
                and b.areaId = #{areaId}
            </if>
        </where>
    </select>

    <select id="getMajoredScoreLinePojoList" resultType="MajoredScoreLinePojo" parameterType="java.util.Map">
        SELECT
        ll.universityId,
        mm.id as majoredId,
        ll.majoredName,
        ll.year,
        ll.enrollBatch,
        ll.subject,
        ll.enrollNumber,
        ll.highestScore,
        ll.lowestScore,
        ll.averageScore
        FROM
        gk_majored mm
        LEFT JOIN
        gk_majored_score_line ll
        ON mm.name = ll.majoredName
        <trim prefix="WHERE" prefixOverrides="AND | OR">
            <if test="universityId != null">
                AND ll.universityId = #{universityId}
            </if>
            <if test="year != null">
                AND ll.year = #{year}
            </if>
            <if test="subject != null">
                AND ll.subject = #{subject}
            </if>
            <if test="areaId != null">
                AND ll.areaId = #{areaId}
            </if>
        </trim>
        GROUP BY ll.majoredName
    </select>

    <select id="getMajoredScoreLineYears" resultType="String" parameterType="java.util.Map">
        select DISTINCT year
        from gk_majored_score_line
        <trim prefix="WHERE" prefixOverrides="AND | OR">
            <if test="universityId != null">
                AND universityId = #{universityId}
            </if>
            <if test="areaId != null">
                AND areaId = #{areaId}
            </if>
        </trim>
        order by year DESC
        limit 3
    </select>

    <select id="getOpenMajoredPojoList" resultType="OpenMajoredPojo" parameterType="java.util.Map">
        select
        mm.id as majoredId ,
        rr.majorName as majoredName,
        <!-- pp.majorBatch as batch,专业信息补充内容表中只有本科专科，暂时不显示-->
        pp.subject as subject,
        <!-- majoredRank,-->
        rr.salaryRank as salaryRank,
        rr.employedRank as employmentRateRank,
        isEnrol as isEnrol
        from gk_majored mm
        left join  gk_majored_rank rr
        on mm.name=rr.majorName
        left join (
            select id,universityId,majoredName,batch,subject,year,areaId,1 as isEnrol
            from gk_enroll_plan
            where universityId = #{universityId} and areaId = #{areaId}
        ) pp
        on  rr.universityId = pp.universityId
        and rr.majorName=pp.majoredName
        and pp.year = #{year}
        where rr.universityId = #{universityId}
        GROUP BY rr.majorName,pp.subject
    </select>

    <select id="getRecentlyPlanInfosByYear" parameterType="java.util.Map" resultType="java.lang.Integer">
        select DISTINCT pp.year
        from gk_majored mm left join gk_enroll_plan pp on mm.id=pp.majoredId
        where
        pp.universityId=#{universityId}
        <if test="batch !=null and batch !=''">
            and pp.batch=#{batch}
        </if>
        <if test="areaId !=null and areaId !=''">
            and pp.areaId=#{areaId}
        </if>
        order by pp.year DESC
        limit 3
    </select>

    <select id="getRecentlyEnrollInfoByYear" parameterType="java.util.Map" resultType="java.lang.Integer">

        select DISTINCT year
        from gk_enroll_report where universityId=#{universityId}
        <if test="batch !=null and batch !=''">
            and batch=#{batch}
        </if>
        <if test="areaId !=null and batch !=''">
            and areaId=#{areaId}
        </if>
        order by year DESC
        limit 3
    </select>

    <insert id="saveMajoredScoreLine" parameterType="java.util.Map" >
        INSERT INTO gk_majored_score_line
        (
        universityId,
        universityName,
        majoredId,
        majoredName,
        provinceName,
        year,
        enrollBatch,
        subject,
        enrollNumber,
        highestScore,
        lowestScore,
        averageScore,
        areaId
        )
        VALUES
        (
        #{universityId},
        #{universityName},
        #{majoredId},
        #{majoredName},
        #{provinceName},
        #{year},
        #{enrollBatch},
        #{subject},
        #{enrollNumber},
        #{highestScore},
        #{lowestScore},
        #{averageScore},
        #{areaId}
        )
    </insert>

    <!-- 根据关键词查询学校基本信息 -->
    <select id="getUniversityInfoByKeywords" parameterType="java.util.Map" resultType="University">
        select id,name from zgk_university where name like CONCAT('%',#{keywords},'%') LIMIT 5
    </select>
</mapper>
