<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="cn.thinkjoy.gk.dao.IUniversityInfoDao">

    <resultMap id="BaseResultMap" type="cn.thinkjoy.gk.entity.UniversityInfoView">
        <id column="id" property="id" jdbcType="BIGINT" />
        <result column="isProportion" property="isProportion" jdbcType="BIT" />
        <result column="isRange" property="isRange" jdbcType="BIT" />
        <result column="rankTrend" property="rankTrend" jdbcType="VARCHAR" />
        <result column="subjection" property="subjection" jdbcType="VARCHAR" />
        <result column="type" property="type" jdbcType="INTEGER" />
        <result column="property" property="property" jdbcType="VARCHAR" />
        <result column="code" property="code" jdbcType="VARCHAR" />
        <result column="planEnrolling" property="planEnrolling" jdbcType="INTEGER" />
        <result column="averageScore" property="averageScore" jdbcType="INTEGER" />
        <result column="universityId" property="universityId" jdbcType="BIGINT" />
        <result column="universityName" property="universityName" jdbcType="VARCHAR" />
        <result column="scoreDiff" property="scoreDiff" jdbcType="INTEGER" />
        <result column="precedence" property="precedence"  jdbcType="INTEGER"/>
        <result column="preScoreDiff" property="preScoreDiff" jdbcType="INTEGER" />
        <result column="enrollRate" property="enrollRate" jdbcType="NUMERIC" />
        <result column="scoreUseRate" property="scoreUseRate" jdbcType="NUMERIC" />
        <result column="areaId" property="areaId" jdbcType="INTEGER" />
        <result column="typeName" property="typeName" jdbcType="VARCHAR" />
    </resultMap>

    <sql id="Base_Column_List">
        id,universityId,universityName,scoreDiff,preScoreDiff,enrollRate,scoreUseRate
    </sql>
    <sql id="Search_Column_List">
         bData.*,zgk_university.isProportion,zgk_university.isRange,zgk_university.rankTrend,zgk_university.subjection,zgk_university.type,zgk_university.property,province.id as areaId,
        zgk_university_enroll.averageScore ,province.code as code,dict.name as typeName
--         sum(enrollingPlan.planEnrolling) as planEnrolling,
    </sql>
    <sql id="Search_Column_List_Ranking">
         bData.*,zgk_university.isProportion,zgk_university.isRange,zgk_university.rankTrend,zgk_university.subjection,zgk_university.type,zgk_university.property,province.id as areaId,
         province.code as code,dict.name as typeName
    </sql>
    <sql id="Base_Join_Search_Column">
        left join zgk_university as zgk_university on bData.universityId=zgk_university.id
        left join zgk_province as province on zgk_university.provinceCode=province.id
        left join zgk_data_dict as dict on zgk_university.type=dict.dictId
    </sql>
    <!--按位次-->
    <select id="selectUniversityInfo" resultMap="BaseResultMap" parameterType="java.util.Map" >
        select <include refid="Search_Column_List" /> from ${tableName} as bData
        left join zgk_university as zgk_university on bData.universityId=zgk_university.id
        left join zgk_university_enrolling as zgk_university_enroll on bData.universityId=zgk_university_enroll.universityId
        left join zgk_province as province on zgk_university.provinceCode=province.id
        left join zgk_data_dict as dict on zgk_university.type=dict.dictId
--         left join zgk_university_major_enrolling_plan as enrollingPlan on bData.universityId=enrollingPlan.universityId
        <where>
            <choose>
                <when test="precedence!=null">
                    and bData.precedence=#{precedence,jdbcType=INTEGER}
                </when>
                <otherwise>
                    and bData.scoreDiff=#{scoreDiff,jdbcType=INTEGER}
                </otherwise>
            </choose>
            <if test="year!=null">
                and zgk_university_enroll.year=#{year,jdbcType=INTEGER}
            </if>
            <!--<if test="code!=null">-->
                <!--and province.code=${code}-->
            <!--</if>-->
            <if test="majorType!=null">
                 and zgk_university_enroll.majorType=#{majorType,jdbcType=INTEGER}
            </if>
            <if test="enrollRateBegin!=null and enrollRateEnd!=null">
                and  left(bData.enrollRate*100,7)&gt;=#{enrollRateBegin,jdbcType=INTEGER} and left(bData.enrollRate*100,7)&lt;=#{enrollRateEnd,jdbcType=INTEGER}
            </if>
            <if test="scoreUseRateBegin!=null and scoreUseRateEnd!=null">
                and left(bData.scoreUseRate*100,7)&gt;=#{scoreUseRateBegin,jdbcType=INTEGER} and left(bData.scoreUseRate*100,7)&lt;=#{scoreUseRateEnd,jdbcType=INTEGER}
            </if>
            and dict.type='UNIVERSITY_TYPE'
--             and enrollingPlan.planEnrolling is not null
            group by bData.universityId

            order by bData.enrollRate desc,bData.preScoreDiff desc   limit 60
        </where>
    </select>
    <!--按排名-->
    <select id="selectUniversityInfoByRanking" resultMap="BaseResultMap" parameterType="java.util.Map" >
        select <include refid="Search_Column_List_Ranking" /> from ${tableName} as bData
        <include refid="Base_Join_Search_Column"/>
        <where>
            <if test="rankStart!=null and rankEnd!=null">
                and  zgk_university.rank &gt;=#{rankStart,jdbcType=INTEGER}   and zgk_university.rank &lt;=#{rankEnd,jdbcType=INTEGER}
            </if>
            <if test="enrollStart!=null and enrollEnd!=null">
                <choose>
                    <when test="enrollStart==100 and enrollEnd==100">
                        and  left(bData.enrollRate*100,7)=#{enrollEnd,jdbcType=INTEGER}
                    </when>
                    <otherwise>
                        and  left(bData.enrollRate*100,7)&gt;=#{enrollStart,jdbcType=INTEGER} and  left(bData.enrollRate*100,7)&lt;#{enrollEnd,jdbcType=INTEGER}
                    </otherwise>
                </choose>
            </if>
            <if test="precedenceParmas!=null">
                and bData.precedence=#{precedenceParmas,jdbcType=INTEGER}
            </if>
            <if test="isRank==true">
              and zgk_university.rank is not null
            </if>
            and zgk_university.id is not null
            and dict.type='UNIVERSITY_TYPE'
            group by bData.universityId
            <if test="isRank==true">
              order by zgk_university.rank asc
            </if>
            <if test="isEnrolling==true and enrollOrder!=null and scoreDiffOrder!=null">
                order by bData.enrollRate ${enrollOrder},preScoreDiff ${scoreDiffOrder}
            </if>
        </where>
        <if test="isEnrolling==true and begin!=null and end!=null">
            limit #{begin,jdbcType=INTEGER},#{end,jdbcType=INTEGER}
        </if>
    </select>
    <select id="selectPlanEnrolling" parameterType="java.util.Map" resultType="java.lang.Integer">
            select sum(planEnrolling) from zgk_university_major_enrolling_plan
            <where>
                <if test="universityId!=null">
                    universityId=#{universityId}
                </if>
                <if test="enrollRateBegin!=null and enrollRateEnd!=null">
                    and  left(bData.enrollRate*100,7)&gt;=#{enrollRateBegin,jdbcType=INTEGER} and left(bData.enrollRate*100,7)&lt;=#{enrollRateEnd,jdbcType=INTEGER}
                </if>
                <if test="scoreUseRateBegin!=null and scoreUseRateEnd!=null">
                    and left(bData.scoreUseRate*100,7)&gt;=#{scoreUseRateBegin,jdbcType=INTEGER} and left(bData.scoreUseRate*100,7)&lt;=#{scoreUseRateEnd,jdbcType=INTEGER}
                </if>
                and dict.type='UNIVERSITY_TYPE'
            </where>
    </select>

</mapper>