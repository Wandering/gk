<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="cn.thinkjoy.gk.dao.IScoreAnalysisDAO">
<!--
getFavoritesByMajor
getFavoritesBySubjectKey
getFavoritesBySubject
insertFavorites
deleteById
deleteBySubjects
-->

    <select id="queryScoreRecordByUserId" resultType="java.util.Map">
        SELECT
        (SELECT provinceId FROM  zgk_user_info WHERE id=#{userId}) as areaId,
        (SELECT name from zgk_province WHERE id=areaId) as areaName,
        (SELECT schoolName from zgk_user_info where id=#{userId}) as schoolName,
        major_type as majorType,
        yw_score as ywScore,
        sx_score as sxScore,
        wy_score as wyScore,
        wl_score as wlScore,
        sw_score as swScore,
        hx_score as hxScore,
        ls_score as lsScore,
        dl_score as dlScore,
        zz_score as zzScore,
        ty_score as tyScore,
        yw_score_total as ywScoreTotal,
        sx_score_total as sxScoreTotal,
        wy_score_total as wyScoreTotal,
        wl_score_total as wlScoreTotal,
        sw_score_total as swScoreTotal,
        hx_score_total as hxScoreTotal,
        ls_score_total as lsScoreTotal,
        dl_score_total as dlScoreTotal,
        zz_score_total as zzScoreTotal,
        ty_score_total as tyScoreTotal
        from zgk_score_base
        WHERE user_id = #{userId} ORDER BY id DESC LIMIT 1;
     </select>

    <insert id="insertScoreRecord" >
        INSERT INTO zgk_score_base (
        user_id,
        yw_score_total,
        yw_score,
        sx_score_total,
        sx_score,
        wy_score_total,
        wy_score,
        wl_score_total,
        wl_score,
        hx_score_total,
        hx_score,
        sw_score_total,
        sw_score,
        ls_score_total,
        ls_score,
        dl_score_total,
        dl_score,
        zz_score_total,
        zz_score,
        ty_score_total,
        ty_score,
        total_score,
        cdate,
        major_type
        ) VALUES (
        #{userId},
        #{scores.ywScoreTotal},
        #{scores.ywScore},
        #{scores.sxScoreTotal},
        #{scores.sxScore},
        #{scores.wyScoreTotal},
        #{scores.wyScore},
        #{scores.wlScoreTotal},
        #{scores.wlScore},
        #{scores.hxScoreTotal},
        #{scores.hxScore},
        #{scores.swScoreTotal},
        #{scores.swScore},
        #{scores.lsScoreTotal},
        #{scores.lsScore},
        #{scores.dlScoreTotal},
        #{scores.dlScore},
        #{scores.zzScoreTotal},
        #{scores.zzScore},
        #{scores.tyScoreTotal},
        #{scores.tyScore},
        #{totalScore},
        #{cdate},
        #{majorType}
        )
        <selectKey resultType="java.lang.Long" keyProperty="recordId">
            SELECT LAST_INSERT_ID() AS ID
        </selectKey>
    </insert>


    <select id="queryInfoByRecordId" resultType="java.util.Map">
        SELECT
        major_type as majorType,
        (SELECT provinceId FROM  zgk_user_info WHERE id=user_id) as areaId,
        yw_score as ywScore,
        sx_score as sxScore,
        wy_score as wyScore,
        wl_score as wlScore,
        sw_score as swScore,
        hx_score as hxScore,
        ls_score as lsScore,
        dl_score as dlScore,
        zz_score as zzScore,
        ty_score as tyScore,
        yw_score_total as ywScoreTotal,
        sx_score_total as sxScoreTotal,
        wy_score_total as wyScoreTotal,
        wl_score_total as wlScoreTotal,
        sw_score_total as swScoreTotal,
        hx_score_total as hxScoreTotal,
        ls_score_total as lsScoreTotal,
        dl_score_total as dlScoreTotal,
        zz_score_total as zzScoreTotal,
        ty_score_total as tyScoreTotal,
        total_score as totalScore,
        user_id as userId
        from zgk_score_base
        WHERE id = #{recordId};
    </select>

    <select id="queryAllRecordByUserId" resultType="java.util.Map">
        SELECT
        id as recordId,
        major_type as majorType,
        (SELECT provinceId FROM  zgk_user_info WHERE id=user_id) as areaId,
        cdate,
        yw_score as ywScore,
        sx_score as sxScore,
        wy_score as wyScore,
        wl_score as wlScore,
        sw_score as swScore,
        hx_score as hxScore,
        ls_score as lsScore,
        dl_score as dlScore,
        zz_score as zzScore,
        ty_score as tyScore,
        yw_score_total as ywScoreTotal,
        sx_score_total as sxScoreTotal,
        wy_score_total as wyScoreTotal,
        wl_score_total as wlScoreTotal,
        sw_score_total as swScoreTotal,
        hx_score_total as hxScoreTotal,
        ls_score_total as lsScoreTotal,
        dl_score_total as dlScoreTotal,
        zz_score_total as zzScoreTotal,
        ty_score_total as tyScoreTotal,
        total_score as totalScore
        from zgk_score_base
        WHERE user_id = #{userId} ORDER BY cdate;
    </select>


    <select id="queryAreaKey" resultType="java.lang.String">
        SELECT code from zgk_province WHERE id=#{areaId}
    </select>

    <select id="queryStuNum" resultType="java.lang.Integer">
        SELECT num from ${areaTableName} WHERE score = #{totalScore}
    </select>
    <select id="queryAllAreaStuNum" resultType="java.lang.Integer">
        SELECT MAX(avg_pre) from ${areaTableName}
    </select>

    <!--全省排名-->
    <select id="queryProviceRank" resultType="java.lang.Integer">
        SELECT avg_pre from ${areaTableName} WHERE score = #{totalScore}
    </select>

    <!--全省排名2-->
    <select id="queryProviceRank2" resultType="java.lang.Integer">
        SELECT (heigh_pre+low_pre)/2 from zgk_data.ln_2_y from ${areaTableName} WHERE score = #{totalScore}
    </select>

    <!--分数极端情况判定(最小值判定)(不存在于一分一段表中)-->
    <select id="isExistScore" resultType="java.lang.Boolean">
        SELECT MIN(score)&lt;#{totalScore} from ${areaTableName} where score!=0
    </select>

    <!--分数极端情况判定(最大值判定)(不存在于一分一段表中)-->
    <select id="isExistMaxScore" resultType="java.lang.Boolean">
        SELECT max(score)&lt;= #{totalScore} from ${areaTableName} where score!=0
    </select>



    <select id="queryUnivsersityLowestScore" resultType="java.util.Map">
        select lowestScore,year from zgk_university_enrolling
        WHERE universityId = #{schoolId}
            and areaId=#{areaId}
        <if test="batch!=null">
        and batch = #{batch}
        </if>
        <if test="majorType!=null">
        and majorType = #{majorType}
        </if>
        ORDER BY year DESC
        limit 1
    </select>

    <select id="queryMajorLowestScore" resultType="java.util.Map">
        select averageScore,year,majorName from zgk_university_major_enrolling
        WHERE universityId = #{schoolId}
        and areaId=#{areaId}
        and majorCode = #{majorCode}
        ORDER BY year DESC
        limit 1
    </select>

    <select id="queryStuNumToLine" resultType="java.lang.Integer">
        SELECT sum(num) from ${areaTableName} WHERE score > #{totalScore} and score  &lt; #{scoreLine};
    </select>

    <select id="queryScoreLine" resultType="java.lang.String">
        SELECT config_value from zgk_system_parmas
        WHERE config_key like '%_CONTROL_LINES'
        and province_code = (SELECT code from zgk_province where id=#{areaId})
        and major_type = #{majorType}
        and year = #{year}
    </select>

    <select id="queryUnivsersityBatch" resultType="java.util.Map">
        SELECT dictId,name FROM zgk_data_dict
        WHERE type = 'BATCHTYPE2'
        and dictId in
        (SELECT batch from zgk_university_enrolling
        WHERE areaId = #{areaId} and universityId = #{schooleId} and year = #{year}
        <if test="majorType!=null">
        and majorType = #{majorType}
        </if>
        GROUP BY batch);
    </select>

    <select id="queryLastTarget" resultType="java.util.Map">
         SELECT university_id as universityId,batch,major_code as majorCode from zgk_favorite_university
         WHERE user_id = #{userId} ORDER BY id DESC limit 1
    </select>


    <insert id="insertTarget">
        INSERT INTO zgk_favorite_university (
        user_id,
        area_id,
        university_id,
        university_name,
        batch,
        cdate,
        major_code
        ) VALUES (
        #{userId},
        #{areaId},
        #{universityId},
        (select name from zgk_university WHERE id=#{universityId}),
        #{batch},
        #{cdate},
        #{majorCode}
        )
        <selectKey resultType="java.lang.Long" keyProperty="id">
            SELECT LAST_INSERT_ID() AS ID
        </selectKey>
    </insert>


    <!--统计长度-->
    <select id="countUniversity" resultType="java.lang.Integer">
        SELECT count(*) from zgk_university_enrolling
        WHERE areaId = #{areaId} and majorType=#{majorType} and year = #{year}
        and (lowestScore - #{line}) -  #{difference} &lt;= #{bc}
        and #{difference} -(lowestScore - #{line})  &lt;= #{bc}
    </select>




    <!--推荐院校-->
    <select id="queryUniversityByScore" resultType="java.util.Map">
        SELECT * from (
        SELECT
        DISTINCT
        university.areaId as universityAreaId,
        university.rank as rank,
        university.name as schoolName,
        (SELECT name from zgk_data_dict where dictId = batch and type='BATCHTYPE2' limit 1) as batch,
        realEnrollingNumber as stuNum,
        averageScore as averageScore,
    	highestScore as highestScore,
	    lowestScore as lowestScore,
	    universityId,
        (#{difference} - (lowestScore - #{line}) ) as gapSchool,
        (SELECT
        CASE WHEN university_id is null THEN 0 ELSE 1 END
        from zgk_favorite_university WHERE user_id = #{userId} AND university_id = universityId  limit 1) AS isFavorite
        from zgk_university_enrolling enrolling
        LEFT JOIN (SELECT id,areaid as areaId,rank,name from zgk_university ) university ON university.id = enrolling.universityId
        WHERE enrolling.areaId = #{areaId} and majorType = #{majorType}  and year = #{year}
        and (lowestScore - #{line}) -  #{difference} &lt;= #{bc}
        and #{difference} -(lowestScore - #{line})  &lt;= #{bc}
        ORDER BY ABS(gapSchool) ASC
        limit 20) tb ORDER BY universityAreaId !=${areaId},isFavorite!=1,rank is null,rank  ASC
    </select>

    <!--推荐高职前10院校-->
    <select id="queryLowstUniversity" resultType="java.util.Map">
        SELECT
        DISTINCT
        (SELECT name from zgk_university WHERE id = universityId LIMIT 1) as schoolName,
        (SELECT name from zgk_data_dict where dictId = batch and type='BATCHTYPE2' limit 1) as batch,
        realEnrollingNumber as stuNum,
        averageScore as averageScore,
        highestScore as highestScore,
        lowestScore as lowestScore,
        universityId,
        (#{totalScore}-lowestScore) as gapSchool,
        (SELECT
        CASE WHEN university_id is null THEN 0 ELSE 1 END
        from zgk_favorite_university WHERE user_id = #{userId} AND university_id = universityId limit 1) AS isFavorite
        from zgk_university_enrolling,(SELECT
		universityId as uid
        <if test="areaId==320000">
            ,xcRank
        </if>
	    FROM
	    	zgk_university_enrolling_plan
	    WHERE
	    	majorType = #{majorType}
	    AND YEAR = #{year}+1
	    GROUP BY universityId) plan
            WHERE plan.uid = universityId and  areaId = #{areaId} and majorType = #{majorType}  and year = #{year}
            and batch like '8%'
            ORDER BY lowestScore desc
        limit  10;
    </select>

    <!--查询高中-->
    <select id="queryHighSchoolByCountyId" resultType="java.util.Map">
        SELECT
        school_code as schoolCode,
        school_name as schoolName
        from zgk_school_base
        where school_type>300
        and area_code = #{countyId}
        <if test="schoolName!=null">
            and school_name LIKE CONCAT('%',#{schoolName},'%')
        </if>
    </select>
    <!--更新用户信息-->
    <update id="setUserInfo">
       update zgk_user_info
       set
       provinceId= #{provinceId},
       cityId= #{cityId},
       countyId=#{countyId},
       schoolCode=#{schoolCode},
       schoolName=#{schoolName},
       gradeInfo=#{gradeInfo},
       classInfo=#{classInfo}
       where id=#{userId};
    </update>
    <select id="queryUserInfo" resultType="java.util.Map">
        SELECT
        provinceId,
        (SELECT name from zgk_province where id=provinceId) as provinceName,
        cityId,
        (SELECT name from zgk_city where id=cityId) as cityName,
        countyId,
        (SELECT name from zgk_county where id=countyId) as countyName,
        schoolCode,
        schoolName,
        gradeInfo,
        classInfo
        FROM zgk_user_info
        WHERE
        id = #{userId}
    </select>

    <select id="queryUniversityScore" resultType="java.util.Map">
        SELECT
        enrolling.lowestScore,enrolling.realEnrollingNumber,enrolling.averageScore,enrolling.year
        <if test="areaId==320000">
        ,plan.xcRank
        </if>
        FROM zgk_university_enrolling enrolling
        <if test="areaId==320000">
            LEFT JOIN (SELECT xcRank,year,universityId,areaId from zgk_university_enrolling_plan)
            plan on plan.areaId =enrolling.areaId and plan.year=enrolling.year
            and plan.universityId=enrolling.universityId
        </if>
        WHERE enrolling.universityId = #{universityId}
        and enrolling.areaId=#{areaId}
        <if test="batch!=null">
            and enrolling.batch=#{batch}
        </if>
        <if test="majorType!=null">
            and enrolling.majorType=#{majorType}
        </if>
        GROUP BY YEAR DESC limit 3
    </select>

    <!--判断用户年级-->
    <select id="queryUserGrade" resultType="java.lang.Integer">
        SELECT grade from zgk_user_info where id=#{userId}
    </select>

    <!--根据id获取学校名称-->
    <select id="querySchoolNameById" resultType="java.lang.String">
        SELECT name from zgk_university where id=#{id}
    </select>

    <!--根据id获取彼此名称-->
    <select id="queryBatchNameById" resultType="java.lang.String">
        SELECT name from zgk_data_dict where type = 'BATCHTYPE2' and dictId =#{id}
    </select>

    <!--根据areaId获取当前省份总分 可能为空-->
    <select id="queryTotalScoreByAreaId" resultType="java.lang.Integer">
        SELECT config_value from  zgk_system_parmas
        WHERE config_key like '%_DEFAULT_SCORE'
        AND province_code =
        (SELECT code from
        zgk_province WHERE id=#{areaId})
    </select>



    <!--获取用户上一次成绩-->
    <select id="queryLastScore" resultType="java.lang.Float">
        SELECT total_score from zgk_score_base where user_id=#{userId} AND id &lt; #{lastId} ORDER BY cdate desc limit 1
    </select>

    <!--获取当前省份当年参加高考人数 当不存在的时候为0或null-->
    <select id="queryPeoNumByAreaAndType" resultType="java.lang.Integer">
        SELECT config_value from  zgk_system_parmas
        WHERE config_key like '%EXA_NUM'
        AND province_code =
        (SELECT code from
        zgk_province WHERE id=#{areaId}) AND  major_type = #{majorType}
    </select>

    <!--获取当前用户标签-->
    <select id="queryLabelByTypeAndConfig" resultType="java.lang.String">
        SELECT DISTINCT label from
        zgk_score_label
        where type = #{type}
        and config IN (<foreach collection="configs" separator="," item="item">#{item}</foreach>)
    </select>

    <!--统计浙江院校数量-->
    <select id="countZJUniversity" resultType="java.lang.Integer">
        SELECT count(*) from (SELECT majorCode,universityId from zgk_university_major_enrolling WHERE areaId = #{areaId} and year = #{year}
        and averageScore - #{totalScore} &lt;= #{bc}
        and #{totalScore} - averageScore   &lt;= #{bc}) enrolling
        INNER JOIN (SELECT
        majorCode,universityId
        FROM zgk_zj_3in7
        <where>
            <if test="subjectItemList!=null">
                (
                <foreach item="subjectItems" collection="subjectItemList"  separator=" or " index="">
                    <foreach item="mapList" collection="subjectItems.subjectItem" open="(" close=")" separator="and" index="">
                        selectSubject LIKE CONCAT('%','${mapList.selectSubject}','%')
                    </foreach>
                </foreach>
                OR selectSubject = ''
                )
            </if>
        </where>)  3in7 ON 3in7.majorCode=enrolling.majorCode AND 3in7.universityId=enrolling.universityId

    </select>
    <!--推荐院校浙江-->
    <select id="queryZJUniversityByScore" resultType="java.util.Map">
        SELECT * from (
        SELECT
        DISTINCT
        university.areaId as universityAreaId,
        university.rank as rank,
        university.name as schoolName,
        (SELECT name from zgk_data_dict where dictId = batch and type='BATCHTYPE2' limit 1) as batch,
        (SELECT major_name from zgk_major_base WHERE major_code= enrolling.majorCode) as majorName,
        realEnrollingNumber as stuNum,
        averageScore as averageScore,
        enrolling.universityId,
        (#{totalScore} - averageScore) as gapSchool,
        (SELECT
        CASE WHEN university_id is null THEN 0 ELSE 1 END
        from zgk_favorite_university WHERE user_id = #{userId} AND university_id = enrolling.universityId  limit 1) AS isFavorite
        from (select majorCode,universityId,averageScore,realEnrollingNumber,batch from zgk_university_major_enrolling   where areaId = #{areaId} and year = #{year}
        and averageScore - #{totalScore} &lt;= #{bc}
        and #{totalScore} -averageScore  &lt;= #{bc}) enrolling
        INNER JOIN (SELECT
        majorCode,universityId
        FROM zgk_zj_3in7
        <where>
            <if test="subjectItemList!=null">
                (
                <foreach item="subjectItems" collection="subjectItemList"  separator=" or " index="">
                    <foreach item="mapList" collection="subjectItems.subjectItem" open="(" close=")" separator="and" index="">
                        selectSubject LIKE CONCAT('%','${mapList.selectSubject}','%')
                    </foreach>
                </foreach>
                OR selectSubject = ''
                )
            </if>
        </where>)  3in7 ON 3in7.majorCode=enrolling.majorCode AND 3in7.universityId=enrolling.universityId
        LEFT JOIN (SELECT id,areaid as areaId,rank,name from zgk_university) university ON university.id = enrolling.universityId
        ORDER BY ABS(gapSchool) ASC
        limit 20) tb ORDER BY universityAreaId !=${areaId},isFavorite!=1,rank is null,rank  ASC

    </select>

    <!--获取当前用户标签-->
    <select id="queryHistoryScore" resultType="java.util.Map">
        SELECT id,total_score as totalScore,cdate from zgk_score_base WHERE user_id = #{userId} ORDER BY cdate DESC
    </select>

    <!--推荐院校-->
    <select id="queryJSUniversityByScore" resultType="java.util.Map">
        SELECT * from (
        SELECT
        DISTINCT
        university.areaId as universityAreaId,
        university.rank as rank,
        university.name as schoolName,
        (SELECT name from zgk_data_dict where dictId = batch and type='BATCHTYPE2' limit 1) as batch,
        realEnrollingNumber as stuNum,
        averageScore as averageScore,
        highestScore as highestScore,
        lowestScore as lowestScore,
        universityId,
        (#{difference} - (lowestScore - #{line}) ) as gapSchool,
        xcRank,
        (SELECT
        CASE WHEN university_id is null THEN 0 ELSE 1 END
        from zgk_favorite_university WHERE user_id = #{userId} AND university_id = universityId  limit 1) AS isFavorite
        from
        (select realEnrollingNumber,highestScore,averageScore,lowestScore,universityId,batch from zgk_university_enrolling
        WHERE areaId = #{areaId}
        and majorType = #{majorType}
        and year = #{year}) enrolling
        INNER JOIN (
        SELECT
        universityId AS uid,
        xcRank
        FROM
        zgk_university_enrolling_plan
        WHERE
        YEAR = #{year}+1
        AND majorType = #{majorType}
        <!--AND batch = #{batch}-->
        AND areaId = #{areaId}
        AND xcRank in (<foreach collection="xcRanks" item="item" separator=",">#{item}</foreach>)
        ) plan ON plan.uid = universityId
        LEFT JOIN (SELECT id,areaid as areaId,rank,name from zgk_university ) university ON university.id = enrolling.universityId
        WHERE
        plan.uid = enrolling.universityId
        and (lowestScore - #{line}) -  #{difference} &lt;= #{bc}
        and #{difference} -(lowestScore - #{line})  &lt;= #{bc}
        ORDER BY ABS(gapSchool) ASC
        limit 20) ttb ORDER BY universityAreaId !=${areaId},isFavorite!=1,rank is null,rank  ASC
    </select>
    <!--统计江苏院校数量-->
    <select id="countJSUniversity" resultType="java.lang.Integer">
        SELECT count(*) from (SELECT * FROM  zgk_university_enrolling WHERE areaId = #{areaId} and year = #{year} and majorType = #{majorType}) enrolling
        INNER JOIN (
        SELECT
        universityId AS uid,
        xcRank
        FROM
        zgk_university_enrolling_plan
        WHERE
        YEAR = #{year}+1
        AND majorType = #{majorType}
        <!--AND batch = #{batch}-->
        AND areaId = #{areaId}
        AND xcRank in (<foreach collection="xcRanks" item="item" separator=",">#{item}</foreach>)
        ) plan ON plan.uid = universityId
        WHERE
        (lowestScore - #{line}) -  #{difference} &lt;= #{bc}
        and #{difference} -(lowestScore - #{line})  &lt;= #{bc}
    </select>


    <!--获取专业过滤没有code对应的,必须在计划表中存在,必须根据用户选择的科目来确定,并且要在2015年招生信息中存在-->
    <select id="queryMajorBySchoolIdAndAreaId" resultType="java.util.Map">
        SELECT enrolling.majorCode,enrolling.majorName FROM
        (select majorCode,universityId,majorName from zgk_university_major_enrolling where universityId=#{universityId}
        and areaId = #{areaId} and year = #{year} and majorCode is not null)
        enrolling
        INNER JOIN (SELECT
        majorCode,universityId
        FROM zgk_zj_3in7
        <where>
            <if test="subjectItemList!=null">
                (
                <foreach item="subjectItems" collection="subjectItemList"  separator=" or " index="">
                    <foreach item="mapList" collection="subjectItems.subjectItem" open="(" close=")" separator="and" index="">
                        selectSubject LIKE CONCAT('%','${mapList.selectSubject}','%')
                    </foreach>
                </foreach>
                OR selectSubject = ''
                )
            </if>
        </where>)  3in7 ON 3in7.majorCode=enrolling.majorCode AND 3in7.universityId=enrolling.universityId
    </select>

    <!--获取当前学校的最新选测等级-->
    <select id="queryUniversitySubLevel" resultType="java.lang.String">
        SELECT
        xcRank
        FROM
        zgk_university_enrolling_plan
        WHERE
        YEAR = #{year}
        AND areaId=#{areaId}
        AND universityId = #{universityId} limit 1
    </select>
</mapper>

